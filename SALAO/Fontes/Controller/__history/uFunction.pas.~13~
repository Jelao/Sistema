unit uFunction;

interface

uses
  Windows,
  Messages,
  SysUtils,
  Variants,
  Classes,
  TlHelp32,
  ShellAPI,
  System.IniFiles,
  Vcl.Graphics,
  PsAPI,
  Registry,
  System.Contnrs,
  System.Generics.Collections,
  Jpeg;

var
  sLogin    : String;
  sSenha    : String;

function InputQuery_char(const ACaption, APrompt: string; var Value: string): Boolean;
function InputBox_char(const ACaption, APrompt,ADefault: string): string;
function Ini_Le_String(Arquivo, Titulo, Campo: String): String;
function Ini_Grava_String(Arquivo, Titulo, Campo, Valor: String): Boolean;
Function VerficarSeAplicaticoEstarRodandoPeloNomeDoExecutavel(Nome:String):Boolean;
function RetornaTag(sText,sTagIni,sTagFim:String):String;
function RetornaItemTag(sText,sTagIni:String):String;
function RecortaTag(sTextOrig,sTextAux,sTagIni,sTagFim:String):String;
function RetornaZero(sText:String):String;
function RetornaIndDest(sText:String):String;
function RetornaDataNFe(sHora1,sHora2:string):string;
function RetornaDataSAT(sData:string):string;
function RetornaHoraSAT(sHora:string):string;
function LastCampo(sText,sDelimiter:string):Boolean;
function RemoveStrings(sTxt:String):String;
function FinalizaProcessoExe(ExeFileName: string): Integer;
function VerficaExe(Nome:String):Boolean;

procedure Gerar_Log(Texto: String);
procedure CriaDir(Dir:String);

procedure ConvertJPG_BMP(xFile: string);
procedure ConvertBMP_JPG(xFile: string; Quality : Integer );


implementation

uses
  FMX.Forms,
  Vcl.StdCtrls,
  Winapi.ActiveX,
  Vcl.Forms,
  Vcl.Controls,
  Vcl.Dialogs;

function InputBox_char(const ACaption, APrompt,ADefault: string): string;
begin
  Result := ADefault;
  InputQuery_char(ACaption, APrompt, Result);
end;

function InputQuery_char(const ACaption, APrompt: string; var Value: string): Boolean;
  function GetAveCharSize(Canvas: TCanvas): TPoint;
  var
    I: Integer;
    Buffer: string;
    Size: TSize;
  begin
    SetLength(Buffer, 52);
    for I := 0 to 25 do Buffer[I + 1] := Chr(I + Ord('A'));
    for I := 0 to 25 do Buffer[I + 27] := Chr(I + Ord('a'));
    GetTextExtentPoint(Canvas.Handle, PChar(Buffer), 52, Size);
    Result.X := Size.cx div 52;
    Result.Y := Size.cy;
  end;
var
  Form: TForm;
  Prompt: TLabel;
  Edit: TEdit;
  DialogUnits: TPoint;
  ButtonTop, ButtonWidth, ButtonHeight: Integer;
begin
  Result := False;
  Form := TForm.Create(Application);
  with Form do
    try
      Canvas.Font := Font;
      DialogUnits := GetAveCharSize(Canvas);
      BorderStyle := bsDialog;
      Caption := ACaption;
      ClientWidth := MulDiv(180, DialogUnits.X, 4);
      PopupMode := pmAuto;
      Position := poScreenCenter;
      Prompt := TLabel.Create(Form);
      with Prompt do
      begin
        Parent := Form;
        Caption := APrompt;
        Left := MulDiv(8, DialogUnits.X, 4);
        Top := MulDiv(8, DialogUnits.Y, 8);
        Constraints.MaxWidth := MulDiv(164, DialogUnits.X, 4);
        WordWrap := True;
      end;
      Edit := TEdit.Create(Form);
      with Edit do
      begin
        Parent := Form;
        Left := Prompt.Left;
        Top := Prompt.Top + Prompt.Height + 5;
        Width := MulDiv(164, DialogUnits.X, 4);
        MaxLength := 255;
        PasswordChar := '*';

        Text := Value;
        SelectAll;
      end;
      ButtonTop := Edit.Top + Edit.Height + 15;
      ButtonWidth := MulDiv(50, DialogUnits.X, 4);
      ButtonHeight := MulDiv(14, DialogUnits.Y, 8);
      with TButton.Create(Form) do
      begin
        Parent := Form;
        Caption := 'OK';//SMsgDlgOK;
        ModalResult := mrOk;
        Default := True;
        SetBounds(MulDiv(38, DialogUnits.X, 4), ButtonTop, ButtonWidth,
          ButtonHeight);
      end;
      with TButton.Create(Form) do
      begin
        Parent := Form;
        Caption := 'CANCEL';//SMsgDlgCancel;
        ModalResult := mrCancel;
        Cancel := True;
        SetBounds(MulDiv(92, DialogUnits.X, 4), Edit.Top + Edit.Height + 15,
          ButtonWidth, ButtonHeight);
        Form.ClientHeight := Top + Height + 13;
      end;
      if ShowModal = mrOk then
      begin
        Value := Edit.Text;
        Result := True;
      end;
    finally
      Form.Free;
    end;
end;

function  Ini_Le_String(Arquivo, Titulo, Campo: String): String;
Var
  Arq_Ini: TIniFile;
begin
  Arq_Ini := TIniFile.Create(Arquivo);
  Try
    Result := Arq_Ini.ReadString(Titulo,Campo,'');
  Except
    MessageDlg('Erro no acesso ao arquivo: ' + Arquivo,mtError,[mbOk],0);
    Result := '';
  End;
  Arq_Ini.Free;
end;

function Ini_Grava_String(Arquivo, Titulo, Campo, Valor: String): Boolean;
Var
  Arq_Ini: TIniFile;
begin
  Result  := True;
  Arq_Ini := TIniFile.Create(Arquivo);
  Try
    Arq_Ini.WriteString(Titulo,Campo,Valor);
  Except
    MessageDlg('Erro no acesso ao arquivo: ' + Arquivo,mtError,[mbOk],0);
    Result := False;
  End;
  Arq_Ini.Free;
end;

Function VerficarSeAplicaticoEstarRodandoPeloNomeDoExecutavel(Nome:String):Boolean;
var rId:array[0..999] of DWord; i,NumProc,NumMod:DWord;
    HProc,HMod:THandle; sNome:String;
    Tamanho, Count:Integer;
    sNomeTratado:String;
begin
  result:=False;
  SetLength(sNome, 256);
// Aqui vc pega os IDs dos processos em execução
  EnumProcesses(@rId[0], 4000, NumProc);

// Aqui vc faz um for p/ pegar cada processo
  for i := 0 to NumProc div 4 do
  begin
// Aqui vc seleciona o processo
    HProc := OpenProcess(Process_Query_Information or Process_VM_Read, FALSE, rId[i]);
    if HProc = 0 then
      Continue;
// Aqui vc pega os módulos do processo
// Como vc só quer o nome do programa, então será sempre o primeiro
    EnumProcessModules(HProc, @HMod, 4, NumMod);
// Aqui vc pega o nome do módulo; como é o primeiro, é o nome do programa
    GetModuleBaseName(HProc, HMod, @sNome[1], 256);
    sNomeTratado := trim(sNome);
    Tamanho:=Length(SnomeTratado);
     Count:=1;
     While Count <= Tamanho do
       begin
         if SnomeTratado[Count]= '' Then
           Break;
        count:=Count+1;
       end;
     sNomeTratado:=Copy(SnomeTratado,1,Count-1);
    if AnsiUpperCase(sNomeTratado)=AnsiUpperCase(Nome) Then
      Result:=True;
// Aqui vc libera o handle do processo selecionado
    CloseHandle(HProc);
  end;
end;

function RetornaTag(sText,sTagIni,sTagFim:String):String;
var
  sResult : String;
  x,y     : Integer;
begin
  sResult := sText;

  if Pos(sTagIni,sResult) > 0 then
  begin
    x       := Pos(sTagIni,sResult) + Length(sTagIni);
    y       := Pos(sTagFim,sResult) - x;
    Result  := Copy(sResult,x,y);
  end
  else
    Result := '';
end;

function RetornaItemTag(sText,sTagIni:String):String;
var
  sResult : String;
  x,y     : Integer;
begin
  sResult := sText;

  if Pos(sTagIni,sResult) > 0 then
  begin
    x       := Pos(sTagIni,sResult);
    y       := Length(Copy(sResult,x,Length(sResult)));
    Result  := Copy(sResult,x,y);
  end
  else
    Result := '';
end;

function RecortaTag(sTextOrig,sTextAux,sTagIni,sTagFim:String):String;
var
  x,
  y     : Integer;
begin
  if Trim(sTextOrig) <> '' then
  begin
    x       := Length(sTextAux) + Length(sTagIni) + Length(sTagFim) + 1;
    y       := Length(sTextOrig) - x;
    Result  := Copy(sTextOrig,x,y);
  end
  else
    Result := '';
end;

function RetornaZero(sText:String):String;
begin
  if Trim(sText) = '' then
    Result := '0'
  else
    Result := sText;
end;

function RetornaIndDest(sText:String):String;
begin
  if Trim(sText) = '' then
    Result := '9'
  else
    Result := sText;
end;

function RetornaDataNFe(sHora1,sHora2:string):string;
var
  Dia,
  Mes,
  Ano,
  hh,
  mm,
  ss :String;
begin
  if Trim(sHora1) <> '' then
  begin
    Ano    := Copy(sHora1,1,4);
    Mes    := Copy(sHora1,6,2);
    Dia    := Copy(sHora1,9,2);
    hh     := Copy(sHora1,12,2);
    mm     := Copy(sHora1,15,2);
    ss     := Copy(sHora1,18,2);
    Result := Ano + '-' + Mes + '-' + Dia + ' ' +
              hh  + ':' +  mm + ':' + ss;
  end
  else if Trim(sHora2) <> ''  then
  begin
    Ano    := Copy(sHora2,1,4);
    Mes    := Copy(sHora2,6,2);
    Dia    := Copy(sHora2,9,2);
    hh     := Copy(sHora2,12,2);
    mm     := Copy(sHora2,15,2);
    ss     := Copy(sHora2,18,2);
    Result := Ano + '-' + Mes + '-' + Dia + ' ' +
              hh  + ':' +  mm + ':' + ss;
  end;
end;

function RetornaDataSAT(sData:string):string;
var
  Dia,
  Mes,
  Ano:String;
begin
  Ano    := Copy(sData,1,4);
  Mes    := Copy(sData,5,2);
  Dia    := Copy(sData,7,2);
  Result := Ano + '-' + Mes + '-' + Dia;
end;

function RetornaHoraSAT(sHora:string):string;
var
  hh,
  mm,
  ss :String;
begin
  hh    := Copy(sHora,1,2);
  mm    := Copy(sHora,3,2);
  ss    := Copy(sHora,5,2);
  Result := hh + ':' + mm + ':' + ss;
end;

function LastCampo(sText,sDelimiter:string):Boolean;
begin
  if Copy(sText,Length(sText),1) = sDelimiter then
    Result := True
  else
    Result := False;
end;

procedure CriaDir(Dir:String);
var
  sTemp,
  sdirect      : String;
begin
  sTemp        := '';
  sdirect      := '';
  while true do
  begin
    if POS('\',Dir) > 0 then
    begin
      sTemp   := sTemp + Copy(Dir,1,POS('\',Dir));
      sdirect := Copy(Dir,POS('\',Dir)+1,Length(Dir));
      if not(DirectoryExists(sTemp)) then
        ForceDirectories(sTemp);

      Dir := sdirect;
    end
    else
    begin
      Break;
    end;
  end;
end;

procedure Gerar_Log(Texto: String);
Var
  Arq: TextFile;
  Log_File: String;
  Path_Dir:string;
begin
  Path_Dir := IncludeTrailingBackslash(ExtractFilePath(Application.ExeName)) + 'Logs\';
  if not(DirectoryExists(Path_Dir)) then
    ForceDirectories(Path_Dir);

  Log_File := Path_Dir + 'Logs' + '_' + FormatDateTime('yyyy.MM.dd',Date) + '.LOG';

  If Copy(Texto,1,10) <> '----------' Then
    Texto := TimeToStr(Time) + ' - Loja v1.0.0.1  - ' + Texto;

  // Abre Arquivo
  AssignFile(Arq,Log_File);

  If Not(FileExists(Log_File)) Then
    ReWrite(Arq)
  Else
    Append(Arq);

  // Grava Texto
  WriteLn(Arq,Texto);

  // Fecha Arquivo
  Flush(Arq);
  CloseFile(Arq);
end;

function RemoveStrings(sTxt:String):String;
var
  iLoop  : Integer;
  sTexto : string;
begin
  sTexto := sTxt;
  for iLoop := 1 to Length(sTexto) do
  begin
    if not(sTxt[iLoop] in ['0'..'9']) then
      Result := Result + sTxt[iLoop];
  end;
  Result := StringReplace(sTexto,Result,'',[rfReplaceAll]);
end;

function FinalizaProcessoExe(ExeFileName: string): Integer;
const
  PROCESS_TERMINATE = $0001;
var
  ContinueLoop: BOOL;
  FSnapshotHandle: THandle;
  FProcessEntry32: TProcessEntry32;
begin
  Result := 0;
  FSnapshotHandle := CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
  FProcessEntry32.dwSize := SizeOf(FProcessEntry32);
  ContinueLoop := Process32First(FSnapshotHandle, FProcessEntry32);
  while Integer(ContinueLoop) <> 0 do
  begin
    if ((UpperCase(ExtractFileName(FProcessEntry32.szExeFile)) = UpperCase(ExeFileName)) or (UpperCase(FProcessEntry32.szExeFile) = UpperCase(ExeFileName))) then
    begin
      Result := Integer(TerminateProcess(
                        OpenProcess(PROCESS_TERMINATE,
                                    BOOL(0),
                                    FProcessEntry32.th32ProcessID),
                                    0));
    end;
    ContinueLoop := Process32Next(FSnapshotHandle, FProcessEntry32);
  end;
  CloseHandle(FSnapshotHandle);
end;

function VerficaExe(Nome:String):Boolean;
const
  PROCESS_TERMINATE = $0001;
var
  ContinueLoop: BOOL;
  FSnapshotHandle: THandle;
  FProcessEntry32: TProcessEntry32;
begin
  Result := False;
  FSnapshotHandle := CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
  FProcessEntry32.dwSize := SizeOf(FProcessEntry32);
  ContinueLoop := Process32First(FSnapshotHandle, FProcessEntry32);
  while Integer(ContinueLoop) <> 0 do
  begin
    if ((UpperCase(ExtractFileName(FProcessEntry32.szExeFile)) = UpperCase(Nome)) or (UpperCase(FProcessEntry32.szExeFile) = UpperCase(Nome))) then
    begin
      Result := True;
      Exit;
    end;
    ContinueLoop := Process32Next(FSnapshotHandle, FProcessEntry32);
  end;
  CloseHandle(FSnapshotHandle);
end;

procedure ConvertJPG_BMP(xFile: string);
var
  BMP: TBitmap;
  JPG: TJPegImage;
begin
  if ExtractFileExt(xFile) <> '.jpg' then
  begin
   ShowMessage('Formato diferente de jpg'+#13+ 'Formato atual : ' + ExtractFileExt(xFile));
   Exit;
  end;

  JPG := TJPegImage.Create;
  try
   JPG.LoadFromFile(xFile);
   BMP := TBitmap.Create;
   try
    BMP.Assign(JPG);
    BMP.SaveToFile(ChangeFileExt(xFile, '.bmp'));
   finally
     FreeAndNil(BMP);
   end;
  finally
   FreeAndNil(JPG);
  end;
end;

end.
